{"name":"A Dumb Framework","tagline":"A very dumb framework/glue to GLFW/GLEW/SOIL for quick and dirty prototyping.","body":"### Purpose\r\nThere's many good libraries for speeding up your productivity. But sometimes, speeding up is not enough. You're always running out of time. One can always get libraries like GLFW, GLEW, SOIL. But you need to do basic stuff over and over again. Here comes the dumb framework. It implements the glue, a slightly higher level of abstraction that combines underneath libraries without cutting you from them.\r\n\r\nWe're talking about ultra-lightweight productions here. It's not about getting a middleware, pushing your assets and publishing a fat prototype. It's about coding a couple of routines, launch your favorite compilers and obtaining a shiny tiny executable.\r\n\r\n### So, how can I use your stuff ?\r\nAssuming you're comfortable with C++, here is the thing: There's a class, named Application, that represents the core of your prod. Its purpose is to display one scene at a time (perhaps your app is about a single scene, why not ?). A scene is just an object that can collect information from input devices (keyboard, mouse ...) and output a result (on screen, with sound).\r\nOne only needs to create a scene class by deriving the Scene interface.\r\n\r\n```cpp\r\nclass MyScene : public Scene {\r\n   // ... See the Scene class code, it pretty straightforward.\r\n};\r\n```\r\n\r\nThen, you just have to use it like that.\r\n\r\n```cpp\r\nint main(void) {\r\n  MyScene myScene;\r\n  Application myApplication;      \r\n  WindowHint hint;\r\n  // ... Fill hint with starting preferences (window size, fullscreen ?).\r\n  myApplication.start(hint, &myScene);\r\n\r\n  return 0;\r\n}\r\n```\r\n\r\nComplete examples are available in the git repository, under the 'demo' directory.\r\n### Or what about making things simplier ?\r\nNot concerned about scene management and all that stuff ?\r\nJust use the Wrapper.\r\nWhat you've got to do is just to create a class that implement the following methods:\r\n```cpp\r\nGLFWwindow *createWindow();\r\nvoid destroyWindow(GLFWwindow *);\r\nvoid init();\r\nvoid render();\r\nvoid handleKeyAction(int key, int scancode, int action, int mods);\r\nvoid handleMouseButtonAction(int button, int action, int mods);\r\nvoid handleMousePositionAction(double x, double y);\r\nvoid handleMouseWheelAction(double x, double y);\r\nvoid handleWindowSize(int x, int y);\r\nvoid handleChar(unsigned int unicodeChar);\r\nvoid handleCursorEnter(int flag);\r\n```\r\nAnd that's about it. Then, merges it with the wrapper using the magic of the templates like this:\r\n```cpp\r\n// Include GLFW/GLEW stuff\r\n#include <wrapper.hpp>\r\n#include \"the_place_where_you_declared_your_class.hpp\"\r\n\r\n// Let say that your class is named 'MySimpleApplication'.\r\n\r\n\r\nint main(void) {\r\n  Wrapper<MySimpleApplication> *wrapper;\r\n  MySimpleApplication *app = new MySimpleApplication(/* your own flavour of constructor */);\r\n  // Do whatever you want to prepare your stuff. Then.\r\n\r\n  wrapper = new Wrapper<MySimpleApplication>(app);\r\n\r\n  wrapper->start();\r\n\r\n  return 0;\r\n}\r\n```\r\n\r\nAnd voil√† !\r\n\r\n### What if I want to play with sprites ?\r\nThe way to flat happiness is short with this dumb framework. But it requires a little descriptive effort. What you need is a square picture, about power of two (16x16, 32x32 ... but usually 512x512 or even 1024x1024) and an XML file that describe what's in it in term of sprite and animation of sprite. Here's an example:\r\n```xml\r\n<!-- First the path to the picture. Note that is can be\r\nabsolute OR relative - from where you've launched your\r\nprogram. Then come the number of sprite definition. -->\r\n<atlas path=\"testsprite.png\" size=\"1\">\r\n\r\n<!-- Here comes the list of definitions. From here,\r\nyou can define any sprite you want. Keep in mind that\r\neverything is about numerical identifier by now.\r\nAfterall, this framework is really dumb. -->\r\n\r\n<!-- So, here is the first definition. Its identifier\r\nis obviously 'O'. The 'size' attribute says that it\r\nhosts only one animation. -->\r\n<definition id=\"0\" size=\"1\">\r\n  <!-- Then comes the list of animations. The first\r\n  one got the identifier '0' (what a surprise ...).\r\n  We also precise that the animation will consist in\r\n  five frames (and don't lie about this - the framework\r\n  is very itchy when it comes to lies ... -->\r\n  <animation id=\"0\" size=\"5\">\r\n    <!-- Time to list the frames. No identifier here, only\r\n    'time'. It designate the time of appearance in milliseconds.\r\n    As always, declare the frame in order of appearance. The\r\n    Dumb Framework being dumb, it won't make the job for you. -->\r\n\r\n    <!-- offsetX and offsetY is a displacement in pixel given the\r\n    declared position of the sprite (you'll see that it's useful\r\n    for stuff like jump animation and so on).\r\n    width and height are dimension, in pixels.\r\n    topU, topV, bottomU, bottomV are texture coordinate in pixel\r\n    within the big picture you're pointing at. They are coordinate\r\n    of the upper-left and bottom-right corners. -->\r\n    <frame time=\"0\"\r\n           offsetX=\"0\" offsetY=\"0\"\r\n           width=\"30\" height=\"50\"\r\n           topU=\"13\" topV=\"5\"\r\n           bottomU=\"43\" bottomV=\"55\"/>\r\n    <frame time=\"200\"\r\n           offsetX=\"0\" offsetY=\"0\"\r\n           width=\"30\" height=\"50\"\r\n           topU=\"55\" topV=\"5\"\r\n           bottomU=\"85\" bottomV=\"55\"/>\r\n    <frame time=\"400\"\r\n           offsetX=\"0\" offsetY=\"0\"\r\n           width=\"30\" height=\"50\"\r\n           topU=\"90\" topV=\"5\"\r\n           bottomU=\"120\" bottomV=\"55\"/>\r\n    <frame time=\"600\"\r\n           offsetX=\"0\" offsetY=\"0\"\r\n           width=\"30\" height=\"50\"\r\n           topU=\"125\" topV=\"5\"\r\n           bottomU=\"155\" bottomV=\"55\"/>\r\n    <frame time=\"800\"\r\n           offsetX=\"0\" offsetY=\"0\"\r\n           width=\"30\" height=\"50\"\r\n           topU=\"13\" topV=\"5\"\r\n           bottomU=\"43\" bottomV=\"55\"/>\r\n    <!-- ... -->\r\n  </animation>\r\n  <!-- ... -->\r\n</definition>\r\n\r\n</atlas>\r\n```\r\n\r\nNow, how to use that ?\r\nFirst, you'll have to include header files sprite.hpp and sprengine.hpp. Then, in you shiny prototype, declare an atlas (you know, this big picture with all your sprite in it), like this:\r\n```cpp\r\nSprite::Atlas *atlas = new Sprite::Atlas(\"/path/to/the/xml\");\r\n```\r\nFrom this object, you'll have access to all the sprite definitions/animations/frame you've declared earlier.\r\nThen, you'll need an 'engine' to display/move all this.\r\n```cpp\r\nSprite::Engine *engine = new Sprite::Engine(atlas, 150000);\r\n```\r\nThe above line declares a sprite engine that will use you previously declared atlas and will be able to displayed 150000 sprites.\r\nWhen setting your scene, be sure to set the viewing window of the sprite engine (it is very important : it can't guess it by itself). For example, given that you have a rendering window with a physical size of 600 per 400 pixels, and you want your sprites rendered at a 1:1 ratio, initialise the sprite engine rendering service like this.\r\n```cpp\r\nengine->viewport(0, 0, 600, 400);\r\n```\r\nThe \"view\" will be centered on coordinate (0, 0). Upper left corner will have coordinate (-300, -200) and bottom right (300, 200).\r\n\r\nNow, it's time to play with the sprites. Remember that we've defined a sprite scheme with identifier '0'. Let's create one instance of it.\r\n```cpp\r\n// Create an instance of sprite from definition 'O', initialy\r\n// place at coordinates (100, 100) and starting with animation '0'.\r\nSprite::Identifier identifier = engine->create(0, glm::vec2(100, 100), 0);\r\n```\r\nBy default, the engine cycle the animations. Here the sprite will be displayed at (100, 100) in the engine coordinate system (in the window context described earlier, it will be (400, 300) ).\r\n\r\nFinally, to render the sprite, just invoke the following:\r\n```cpp\r\nengine->render(); // Magic !\r\n```\r\n\r\nAnd that's it !\r\n\r\nOf course, there's some other methods to actually move the sprites, rotate them, perform zooming and so on. (and this will be documented later even if it's totally done in the code).\r\n\r\nHave fun with that.\r\n\r\n*SomeRandomGameDev* and *BlockoS*\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}